-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\newsimul\Subsystem_ip_src_Subsystem_block.vhd
-- Created: 2023-04-25 13:19:39
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_ip_src_Subsystem_block
-- Source Path: newsimul/Subsystem/Subsystem
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.Subsystem_ip_src_Subsystem_pkg.ALL;

ENTITY Subsystem_ip_src_Subsystem_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        enb_1_32_0                        :   IN    std_logic;
        In1                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        In2                               :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        S_re                              :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        S_im                              :   OUT   std_logic_vector(15 DOWNTO 0)  -- sfix16_En15
        );
END Subsystem_ip_src_Subsystem_block;


ARCHITECTURE rtl OF Subsystem_ip_src_Subsystem_block IS

  -- Component Declarations
  COMPONENT Subsystem_ip_src_Channelizer
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb_1_32_0                      :   IN    std_logic;
          dataIn_re                       :   IN    vector_of_std_logic_vector16(0 TO 31);  -- sfix16_En15 [32]
          dataIn_im                       :   IN    vector_of_std_logic_vector16(0 TO 31);  -- sfix16_En15 [32]
          validIn                         :   IN    std_logic;
          dataOut_re                      :   OUT   vector_of_std_logic_vector16(0 TO 31);  -- sfix16_En15 [32]
          dataOut_im                      :   OUT   vector_of_std_logic_vector16(0 TO 31)  -- sfix16_En15 [32]
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : Subsystem_ip_src_Channelizer
    USE ENTITY work.Subsystem_ip_src_Channelizer(rtl);

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL Deserializer1D_contl_cnt         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Deserializer1D_contl_validOutput : std_logic;
  SIGNAL Deserializer1D_innerRegEn        : std_logic;
  SIGNAL Deserializer1D_innerRegCtrolEn   : std_logic;
  SIGNAL Deserializer1D_outBypassEn       : std_logic;
  SIGNAL Deserializer1D_tapDelayEn        : std_logic;
  SIGNAL Deserializer1D_tapDelayEn_1      : std_logic;
  SIGNAL In1_signed                       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL In2_signed                       : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Deserializer1D_tapout_re         : vector_of_signed16(0 TO 30);  -- sfix16_En15 [31]
  SIGNAL Deserializer1D_tapout_im         : vector_of_signed16(0 TO 30);  -- sfix16_En15 [31]
  SIGNAL In1_signed_1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Deserializer1D_muxOut_re         : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL Deserializer1D_muxOut_im         : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL In2_signed_1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Deserializer1D_out1_re           : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL Deserializer1D_out1_im           : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL Deserializer1D_out1_re_1         : vector_of_std_logic_vector16(0 TO 31);  -- ufix16 [32]
  SIGNAL Deserializer1D_out1_im_1         : vector_of_std_logic_vector16(0 TO 31);  -- ufix16 [32]
  SIGNAL Constant1_out1                   : std_logic;
  SIGNAL Channelizer_out1_re              : vector_of_std_logic_vector16(0 TO 31);  -- ufix16 [32]
  SIGNAL Channelizer_out1_im              : vector_of_std_logic_vector16(0 TO 31);  -- ufix16 [32]
  SIGNAL Serializer1D_contl_cnt           : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL Serializer1D_invldSignal         : std_logic;
  SIGNAL Channelizer_out1_re_signed       : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL Channelizer_out1_im_signed       : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL serial_in_1_re                   : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL serial_in_1_im                   : vector_of_signed16(0 TO 31);  -- sfix16_En15 [32]
  SIGNAL Serializer1D_data_re             : vector_of_signed16(0 TO 30);  -- sfix16_En15 [31]
  SIGNAL Serializer1D_data_im             : vector_of_signed16(0 TO 30);  -- sfix16_En15 [31]
  SIGNAL Serializer1D_data_next_re        : vector_of_signed16(0 TO 30);  -- sfix16_En15 [31]
  SIGNAL Serializer1D_data_next_im        : vector_of_signed16(0 TO 30);  -- sfix16_En15 [31]
  SIGNAL serializer_PostProcessed_re      : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL serializer_PostProcessed_im      : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  u_Channelizer : Subsystem_ip_src_Channelizer
    PORT MAP( clk => clk,
              reset => reset,
              enb_1_32_0 => enb_1_32_0,
              dataIn_re => Deserializer1D_out1_re_1,  -- sfix16_En15 [32]
              dataIn_im => Deserializer1D_out1_im_1,  -- sfix16_En15 [32]
              validIn => Constant1_out1,
              dataOut_re => Channelizer_out1_re,  -- sfix16_En15 [32]
              dataOut_im => Channelizer_out1_im  -- sfix16_En15 [32]
              );

  Deserializer1D_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_contl_cnt <= to_unsigned(16#00#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Deserializer1D_contl_cnt = to_unsigned(16#1F#, 6) THEN 
          Deserializer1D_contl_cnt <= to_unsigned(16#00#, 6);
        ELSE 
          Deserializer1D_contl_cnt <= Deserializer1D_contl_cnt + to_unsigned(16#01#, 6);
        END IF;
      END IF;
    END IF;
  END PROCESS Deserializer1D_contl_process;

  Deserializer1D_tapDelayEn <= hdlcoder_to_stdlogic(Deserializer1D_contl_cnt < to_unsigned(16#1F#, 6));
  
  Deserializer1D_contl_validOutput <= '1' WHEN Deserializer1D_contl_cnt = to_unsigned(16#1F#, 6) ELSE
      '0';
  
  Deserializer1D_innerRegEn <= '1' WHEN Deserializer1D_contl_validOutput = '1' ELSE
      '0';
  
  Deserializer1D_innerRegCtrolEn <= '1' WHEN Deserializer1D_contl_validOutput = '1' ELSE
      '0';
  Deserializer1D_outBypassEn <= '1';

  Deserializer1D_tapDelayEn_1 <= enb AND Deserializer1D_tapDelayEn;

  In1_signed <= signed(In1);

  In2_signed <= signed(In2);

  Deserializer1D_tapDelayComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_tapout_re <= (OTHERS => to_signed(16#0000#, 16));
      Deserializer1D_tapout_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Deserializer1D_tapDelayEn_1 = '1' THEN
        Deserializer1D_tapout_im(30) <= In2_signed;
        Deserializer1D_tapout_im(0 TO 29) <= Deserializer1D_tapout_im(1 TO 30);
        Deserializer1D_tapout_re(30) <= In1_signed;
        Deserializer1D_tapout_re(0 TO 29) <= Deserializer1D_tapout_re(1 TO 30);
      END IF;
    END IF;
  END PROCESS Deserializer1D_tapDelayComp_process;


  In1_signed_1 <= signed(In1);

  Deserializer1D_muxOut_reGEN_LABEL: FOR idx0 IN 0 TO 30 GENERATE
    Deserializer1D_muxOut_re(idx0) <= Deserializer1D_tapout_re(idx0);
  END GENERATE;
  Deserializer1D_muxOut_re(31) <= In1_signed_1;

  In2_signed_1 <= signed(In2);

  Deserializer1D_muxOut_imGEN_LABEL: FOR idx0 IN 0 TO 30 GENERATE
    Deserializer1D_muxOut_im(idx0) <= Deserializer1D_tapout_im(idx0);
  END GENERATE;
  Deserializer1D_muxOut_im(31) <= In2_signed_1;

  Deserializer1D_regComp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Deserializer1D_out1_re <= (OTHERS => to_signed(16#0000#, 16));
      Deserializer1D_out1_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND Deserializer1D_innerRegEn = '1' THEN
        Deserializer1D_out1_re <= Deserializer1D_muxOut_re;
        Deserializer1D_out1_im <= Deserializer1D_muxOut_im;
      END IF;
    END IF;
  END PROCESS Deserializer1D_regComp_process;


  outputgen3: FOR k IN 0 TO 31 GENERATE
    Deserializer1D_out1_re_1(k) <= std_logic_vector(Deserializer1D_out1_re(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 31 GENERATE
    Deserializer1D_out1_im_1(k) <= std_logic_vector(Deserializer1D_out1_im(k));
  END GENERATE;

  Constant1_out1 <= '1';

  Serializer1D_contl_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Serializer1D_contl_cnt <= to_unsigned(16#00#, 5);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        IF Serializer1D_contl_cnt = to_unsigned(16#1F#, 5) THEN 
          Serializer1D_contl_cnt <= to_unsigned(16#00#, 5);
        ELSE 
          Serializer1D_contl_cnt <= Serializer1D_contl_cnt + to_unsigned(16#01#, 5);
        END IF;
      END IF;
    END IF;
  END PROCESS Serializer1D_contl_process;

  
  Serializer1D_invldSignal <= '1' WHEN Serializer1D_contl_cnt = to_unsigned(16#00#, 5) ELSE
      '0';

  outputgen1: FOR k IN 0 TO 31 GENERATE
    Channelizer_out1_re_signed(k) <= signed(Channelizer_out1_re(k));
  END GENERATE;

  serial_in_1_re <= Channelizer_out1_re_signed;

  outputgen: FOR k IN 0 TO 31 GENERATE
    Channelizer_out1_im_signed(k) <= signed(Channelizer_out1_im(k));
  END GENERATE;

  serial_in_1_im <= Channelizer_out1_im_signed;

  Serializer1D_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Serializer1D_data_re <= (OTHERS => to_signed(16#0000#, 16));
      Serializer1D_data_im <= (OTHERS => to_signed(16#0000#, 16));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Serializer1D_data_re <= Serializer1D_data_next_re;
        Serializer1D_data_im <= Serializer1D_data_next_im;
      END IF;
    END IF;
  END PROCESS Serializer1D_process;

  Serializer1D_output : PROCESS (Serializer1D_data_im, Serializer1D_data_re, Serializer1D_invldSignal,
       serial_in_1_im, serial_in_1_re)
  BEGIN
    Serializer1D_data_next_re <= Serializer1D_data_re;
    Serializer1D_data_next_im <= Serializer1D_data_im;
    IF Serializer1D_invldSignal /= '0' THEN 
      serializer_PostProcessed_re <= serial_in_1_re(0);
      serializer_PostProcessed_im <= serial_in_1_im(0);
    ELSE 
      serializer_PostProcessed_re <= Serializer1D_data_re(0);
      serializer_PostProcessed_im <= Serializer1D_data_im(0);
    END IF;
    IF Serializer1D_invldSignal /= '0' THEN 
      Serializer1D_data_next_re(0 TO 30) <= serial_in_1_re(1 TO 31);
      Serializer1D_data_next_im(0 TO 30) <= serial_in_1_im(1 TO 31);
    ELSE 
      Serializer1D_data_next_re(0 TO 29) <= Serializer1D_data_re(1 TO 30);
      Serializer1D_data_next_im(0 TO 29) <= Serializer1D_data_im(1 TO 30);
      Serializer1D_data_next_re(30) <= serial_in_1_re(31);
      Serializer1D_data_next_im(30) <= serial_in_1_im(31);
    END IF;
  END PROCESS Serializer1D_output;


  S_re <= std_logic_vector(serializer_PostProcessed_re);

  S_im <= std_logic_vector(serializer_PostProcessed_im);

END rtl;

