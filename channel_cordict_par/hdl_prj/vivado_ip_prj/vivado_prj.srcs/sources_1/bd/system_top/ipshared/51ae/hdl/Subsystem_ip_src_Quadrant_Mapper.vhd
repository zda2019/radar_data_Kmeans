-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\newsimul\Subsystem_ip_src_Quadrant_Mapper.vhd
-- Created: 2023-04-25 13:19:39
-- 
-- Generated by MATLAB 9.14 and HDL Coder 4.1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Subsystem_ip_src_Quadrant_Mapper
-- Source Path: newsimul/Subsystem/Subsystem1/HDL_CMA_core/Quadrant_Mapper
-- Hierarchy Level: 3
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Subsystem_ip_src_Quadrant_Mapper IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        xin                               :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En15
        yin                               :   IN    std_logic_vector(16 DOWNTO 0);  -- sfix17_En15
        xout                              :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En15
        yout                              :   OUT   std_logic_vector(16 DOWNTO 0);  -- sfix17_En15
        QA_Control                        :   OUT   std_logic_vector(2 DOWNTO 0)  -- ufix3
        );
END Subsystem_ip_src_Quadrant_Mapper;


ARCHITECTURE rtl OF Subsystem_ip_src_Quadrant_Mapper IS

  -- Signals
  SIGNAL xin_signed                       : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL abs_y                            : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL abs_cast                         : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL xAbs                             : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL xAbsReg                          : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL yin_signed                       : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL abs_y_1                          : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL abs_cast_1                       : signed(17 DOWNTO 0);  -- sfix18_En15
  SIGNAL yAbs                             : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL yAbsReg                          : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL relop_relop1                     : std_logic;
  SIGNAL xout_1                           : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL yout_1                           : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL in1reg                           : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL zeros                            : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL relop_relop1_1                   : std_logic;
  SIGNAL in2reg                           : signed(16 DOWNTO 0);  -- sfix17_En15
  SIGNAL relop_relop1_2                   : std_logic;
  SIGNAL qcControl                        : unsigned(2 DOWNTO 0);  -- ufix3

BEGIN
  xin_signed <= signed(xin);

  abs_cast <= resize(xin_signed, 18);
  
  abs_y <=  - (abs_cast) WHEN xin_signed < to_signed(16#00000#, 17) ELSE
      resize(xin_signed, 18);
  xAbs <= abs_y(16 DOWNTO 0);

  DelayxAbs_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      xAbsReg <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        xAbsReg <= xAbs;
      END IF;
    END IF;
  END PROCESS DelayxAbs_process;


  yin_signed <= signed(yin);

  abs_cast_1 <= resize(yin_signed, 18);
  
  abs_y_1 <=  - (abs_cast_1) WHEN yin_signed < to_signed(16#00000#, 17) ELSE
      resize(yin_signed, 18);
  yAbs <= abs_y_1(16 DOWNTO 0);

  DelayyAbs_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      yAbsReg <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        yAbsReg <= yAbs;
      END IF;
    END IF;
  END PROCESS DelayyAbs_process;


  
  relop_relop1 <= '1' WHEN xAbsReg > yAbsReg ELSE
      '0';

  
  xout_1 <= yAbsReg WHEN relop_relop1 = '0' ELSE
      xAbsReg;

  xout <= std_logic_vector(xout_1);

  
  yout_1 <= xAbsReg WHEN relop_relop1 = '0' ELSE
      yAbsReg;

  yout <= std_logic_vector(yout_1);

  Delayin1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in1reg <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in1reg <= xin_signed;
      END IF;
    END IF;
  END PROCESS Delayin1_process;


  zeros <= to_signed(16#00000#, 17);

  
  relop_relop1_1 <= '1' WHEN in1reg < zeros ELSE
      '0';

  Delayin2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      in2reg <= to_signed(16#00000#, 17);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        in2reg <= yin_signed;
      END IF;
    END IF;
  END PROCESS Delayin2_process;


  
  relop_relop1_2 <= '1' WHEN in2reg < zeros ELSE
      '0';

  qcControl <= unsigned'(relop_relop1 & relop_relop1_1 & relop_relop1_2);

  QA_Control <= std_logic_vector(qcControl);

END rtl;

